	262
"\n"	2
#define	8
#include	12
&	1
(int	3
+	4
+=	5
-	4
-=	1
-x;	1
//	5
0,	1
0;	3
0x3f3f3f3f;	1
1)	1
1);	2
10;	2
1;	4
1e5	1
1e9	1
2e5	1
7;	1
<	1
<<	2
<=	4
<algorithm>	1
<cmath>	1
<cstdio>	1
<cstring>	1
<iostream>	1
<map>	1
<queue>	1
<set>	1
<sstream>	1
<stack>	1
<unordered_map>	1
<vector>	1
=	14
>>	3
Endl	1
Endl;	1
INF	1
M	1
N	1
N;	1
PII;	1
T;	2
a[N];	1
a[i]	1
a[i];	1
alls.begin()	1
alls.clear();	1
alls.end()),	1
alls.end());	2
alls.end(),	1
alls.erase(unique(alls.begin(),	1
alls.pb(a[i]);	1
alls;	1
ans	4
cin	3
const	4
cout	1
dx[4]	1
dy[4]	1
else	1
endl	1
find(a[i]);	1
find(int	1
first	1
for	3
for(;	2
i	6
i++){	3
if(l	1
int	18
int>	1
l	1
l;	1
lb(int	1
lb(p)){	2
ll	2
long	4
lower_bound(alls.begin(),	1
main(){	1
memset(tr,	1
mod	1
modify(a[i],	1
modify(int	1
n;	5
namespace	1
p	3
p){	1
p,	1
p;	1
pair<int,	1
pb	1
push_back	1
query(N	1
query(a[i]	1
query(a[i]);	1
query(int	1
r	1
r){	1
r;	1
re	1
res	2
res;	1
return	5
second	1
sizeof(tr));	1
solve();	1
solve(){	1
sort(alls.begin(),	1
std;	1
tr[N];	1
tr[p]	1
tr[p];	1
typedef	1
ull	1
unsigned	1
using	1
v){	1
v;	1
vector<int>	1
void	2
while(T--){	1
x	2
x)	1
x){	2
y	1
{-1,0,1,0};	1
{0,1,0,-1};	1
}	13
下标从1开始	1
二分求出x对应的离散化的值	1
去掉重复元素	1
存储所有待离散化的值	1
将所有值排序	1
